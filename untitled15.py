# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11ebXlRjcWJfVM3FJuvw_JNa5-IaBUVeJ
"""

import pandas as pd
df=messages = pd.read_csv('train(2).csv')
df.head()

df.columns

df.isnull().sum()

y=list(df['Category'])
x=list(df['Message'])

x

y



y=list(pd.get_dummies(y,drop_first=True)['spam'])

y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_Test=train_test_split(x,y,test_size=0.20,random_state=0)

x_train

pip install transformers

from transformers import DistilBertTokenizerFast
tokenizer=DistilBertTokenizerFast.from_pretrained('distilbert-base-uncased')

train_encodings=tokenizer(x_train,truncation=True,padding=True)
test_encoding=tokenizer(x_test,truncation=True,padding=True)

y_train

import tensorflow as tf

train_dataset = tf.data.Dataset.from_tensor_slices((
    dict(train_encodings),
    y_train
))

test_dataset = tf.data.Dataset.from_tensor_slices((
    dict(test_encoding),
    x_test
))

test_dataset

from transformers import TFDistilBertForSequenceClassification, TFTrainer, TFTrainingArguments

training_args = TFTrainingArguments(
    output_dir='./results',          # output directory
    num_train_epochs=2,              # total number of training epochs
    per_device_train_batch_size=8,  # batch size per device during training
    per_device_eval_batch_size=16,   # batch size for evaluation
    warmup_steps=500,                # number of warmup steps for learning rate scheduler
    weight_decay=0.01,               # strength of weight decay
    logging_dir='./logs',            # directory for storing logs
    logging_steps=10,
)

with training_args.strategy.scope():
    model = TFDistilBertForSequenceClassification.from_pretrained("distilbert-base-uncased")

trainer = TFTrainer(
    model=model,                         # the instantiated ðŸ¤— Transformers model to be trained
    args=training_args,                  # training arguments, defined above
    train_dataset=train_dataset,         # training dataset
    eval_dataset=test_dataset             # evaluation dataset
)

trainer.train()

trainer.evaluate(test_dataset)

trainer.predict(test_dataset)

output=trainer.predict(test_dataset)[1]

from sklearn.metrics import confusion_matrix

cm=confusion_matrix(y_test,output)
cm

trainer.save_model('senti_model')